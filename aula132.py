# @property + @setter - getter e setter no modo Pyth√¥nico
# - como getter
# - p/ evitar quebrar c√≥digo cliente
# - p/ habilitar setter
# - p/ executar a√ß√µes ao obter um atributo

# Atributos que come√ßar com um ou dois underlines
# n√£o devem ser usados fora da classe.
#  üêçü§ìü§Øü§Øü§Øü§Ø

class Caneta:
    def __init__(self, cor):
        # private protected
        self.cor = cor
        # setter, √© quando usamos um atributo com "_" na frente para armazenar o valor que desejamos nele.
        # Por conven√ß√£o, quando se inicia o atributo com o "_" ou "__" no come√ßo, estamos informando a outro dev que o atributo
        # n√£o deve ser usado, pois ele √© protegido pela classe e deve ser usado somente dentro da classe.
        self._cor_tampa = None

    # property, √© um metodo que se comporta como um atributo que pega o valor do atributo.
    @property
    def cor(self):
        print('ESTOU NO GETTER')
        return self._cor  # Entrega o valor solicitado

    # Para se usar um setter, tem que ter um @property e abaixo da property usar o
    # decorator setter respectivo dele (como acima e abaixo desse texto).
    # O setter √© um metodo que recebe um valor e altera o valor do atributo.
    # Isso pode ser usado inclusive para controlar o que o usu√°rio pode fazer ou n√£o, como
    # colocar condi√ß√µes ex.: "if valor < 2: print('valor n√£o permitido.')"

    @cor.setter
    def cor(self, valor):
        print('ESTOU NO SETTER')
        self._cor = valor  # Altera o valor do atributo

    @property
    def cor_tampa(self):
        return self._cor_tampa

    @cor_tampa.setter
    def cor_tampa(self, valor):
        self._cor_tampa = valor


caneta = Caneta('Azul')
caneta.cor = 'Rosa'
caneta.cor_tampa = 'Azul'
print(caneta.cor)
print(caneta.cor_tampa)
